package me.redbaby.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.redbaby.greendao.Table_shopping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_SHOPPING".
*/
public class Table_shoppingDao extends AbstractDao<Table_shopping, Long> {

    public static final String TABLENAME = "TABLE_SHOPPING";

    /**
     * Properties of entity Table_shopping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Shopping_id = new Property(1, String.class, "shopping_id", false, "SHOPPING_ID");
        public final static Property Shopping_name  = new Property(2, String.class, "shopping_name ", false, "SHOPPING_NAME ");
        public final static Property Shopping_price = new Property(3, float.class, "shopping_price", false, "SHOPPING_PRICE");
        public final static Property Shopping_url = new Property(4, String.class, "shopping_url", false, "SHOPPING_URL");
        public final static Property Shopping_pic = new Property(5, String.class, "shopping_pic", false, "SHOPPING_PIC");
        public final static Property Shopping_count = new Property(6, int.class, "shopping_count", false, "SHOPPING_COUNT");
        public final static Property Shopping_state = new Property(7, int.class, "shopping_state", false, "SHOPPING_STATE");
    };


    public Table_shoppingDao(DaoConfig config) {
        super(config);
    }
    
    public Table_shoppingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_SHOPPING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHOPPING_ID\" TEXT NOT NULL ," + // 1: shopping_id
                "\"SHOPPING_NAME \" TEXT NOT NULL ," + // 2: shopping_name 
                "\"SHOPPING_PRICE\" REAL NOT NULL ," + // 3: shopping_price
                "\"SHOPPING_URL\" TEXT," + // 4: shopping_url
                "\"SHOPPING_PIC\" TEXT," + // 5: shopping_pic
                "\"SHOPPING_COUNT\" INTEGER NOT NULL ," + // 6: shopping_count
                "\"SHOPPING_STATE\" INTEGER NOT NULL );"); // 7: shopping_state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_SHOPPING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Table_shopping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getShopping_id());
        stmt.bindString(3, entity.getShopping_name ());
        stmt.bindDouble(4, entity.getShopping_price());
 
        String shopping_url = entity.getShopping_url();
        if (shopping_url != null) {
            stmt.bindString(5, shopping_url);
        }
 
        String shopping_pic = entity.getShopping_pic();
        if (shopping_pic != null) {
            stmt.bindString(6, shopping_pic);
        }
        stmt.bindLong(7, entity.getShopping_count());
        stmt.bindLong(8, entity.getShopping_state());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Table_shopping readEntity(Cursor cursor, int offset) {
        Table_shopping entity = new Table_shopping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // shopping_id
            cursor.getString(offset + 2), // shopping_name 
            cursor.getFloat(offset + 3), // shopping_price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shopping_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shopping_pic
            cursor.getInt(offset + 6), // shopping_count
            cursor.getInt(offset + 7) // shopping_state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Table_shopping entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShopping_id(cursor.getString(offset + 1));
        entity.setShopping_name (cursor.getString(offset + 2));
        entity.setShopping_price(cursor.getFloat(offset + 3));
        entity.setShopping_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShopping_pic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShopping_count(cursor.getInt(offset + 6));
        entity.setShopping_state(cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Table_shopping entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Table_shopping entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
